accepted_connections = @accepted_connections.map do |connection|
  current_connection = render partial: "connection.json.jb", locals: { connection: connection }
  if current_user.id != connection.recipient_id
    connected_user = render partial: "/api/users/user.json.jb", locals: { user: connection.recipient }
  else
    connected_user = render partial: "/api/users/user.json.jb", locals: { user: connection.sender}
  end
  current_connection[:connected_user] = connected_user
  message  = connection.messages.last
  if message
    user = render partial: "/api/users/user.json.jb", locals: { user: message.user } 
    current_connection[:message] = {
      id: message.id,
      body: message.body,
      read: message.read,
      sent: message.created_at,
      user: user,
    }
  else 
    current_connection[:message] = {
      id: (0...8).map { (65 + rand(26)).chr }.join,
      body: "You are now connected. Send a message to start the conversation",
      read: true,
      sent: connection.updated_at,
      user: {},
    }
  end
  current_connection
end

pending_connections = @pending_connections.map do |connection|
  current_connection = render partial: "connection.json.jb", locals: { connection: connection }
  sender = render partial: "api/users/user.json.jb", locals: { user: connection.sender }
  current_connection[:sender] = sender
  current_connection
end

{
  pending_connections: pending_connections.reverse,
  accepted_connections: accepted_connections.sort_by { |connection| connection[:message][:sent] }.reverse
}